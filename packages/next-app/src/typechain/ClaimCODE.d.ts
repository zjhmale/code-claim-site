/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ClaimCODEInterface extends ethers.utils.Interface {
  functions: {
    "claimPeriodEnds()": FunctionFragment;
    "claimTokens(uint256,bytes32[],address)": FunctionFragment;
    "codeToken()": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "sweep20(address)": FunctionFragment;
    "sweep721(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "verify(bytes32[],bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimPeriodEnds",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BytesLike[], string],
  ): string;
  encodeFunctionData(functionFragment: "codeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: "sweep20", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweep721",
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike[], BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPeriodEnds",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "codeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "sweep20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "MerkleRootChanged(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Sweep20(address)": EventFragment;
    "Sweep721(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber] & { _claimant: string; _amount: BigNumber }
>;

export type MerkleRootChangedEvent = TypedEvent<
  [string] & { _merkleRoot: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type Sweep20Event = TypedEvent<[string] & { _token: string }>;

export type Sweep721Event = TypedEvent<
  [string, BigNumber] & { _token: string; _tokenID: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class ClaimCODE extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClaimCODEInterface;

  functions: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    codeToken(overrides?: CallOverrides): Promise<[string]>;

    isClaimed(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sweep20(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sweep721(
      _tokenAddr: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    verify(
      _proof: BytesLike[],
      _leaf: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;
  };

  claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

  claimTokens(
    _amount: BigNumberish,
    _merkleProof: BytesLike[],
    _delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  codeToken(overrides?: CallOverrides): Promise<string>;

  isClaimed(_index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sweep20(
    _tokenAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sweep721(
    _tokenAddr: string,
    _tokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  verify(
    _proof: BytesLike[],
    _leaf: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[boolean, BigNumber]>;

  callStatic: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      _delegatee: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    codeToken(overrides?: CallOverrides): Promise<string>;

    isClaimed(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sweep20(_tokenAddr: string, overrides?: CallOverrides): Promise<void>;

    sweep721(
      _tokenAddr: string,
      _tokenID: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    verify(
      _proof: BytesLike[],
      _leaf: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean, BigNumber]>;
  };

  filters: {
    "Claim(address,uint256)"(
      _claimant?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _claimant: string; _amount: BigNumber }
    >;

    Claim(
      _claimant?: string | null,
      _amount?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _claimant: string; _amount: BigNumber }
    >;

    "MerkleRootChanged(bytes32)"(
      _merkleRoot?: null,
    ): TypedEventFilter<[string], { _merkleRoot: string }>;

    MerkleRootChanged(
      _merkleRoot?: null,
    ): TypedEventFilter<[string], { _merkleRoot: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null,
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Sweep20(address)"(
      _token?: null,
    ): TypedEventFilter<[string], { _token: string }>;

    Sweep20(_token?: null): TypedEventFilter<[string], { _token: string }>;

    "Sweep721(address,uint256)"(
      _token?: null,
      _tokenID?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _tokenID: BigNumber }
    >;

    Sweep721(
      _token?: null,
      _tokenID?: null,
    ): TypedEventFilter<
      [string, BigNumber],
      { _token: string; _tokenID: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null,
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    codeToken(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sweep20(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sweep721(
      _tokenAddr: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    verify(
      _proof: BytesLike[],
      _leaf: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimPeriodEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimTokens(
      _amount: BigNumberish,
      _merkleProof: BytesLike[],
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    codeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      _index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sweep20(
      _tokenAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sweep721(
      _tokenAddr: string,
      _tokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    verify(
      _proof: BytesLike[],
      _leaf: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
